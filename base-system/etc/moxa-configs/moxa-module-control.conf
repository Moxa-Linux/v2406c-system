#
# Config file version
#
CONFIG_VERSION=1.3.0

#
# Platform configuration for modules
#
NUM_OF_MODULE_SLOTS=2
MODULE_SLOT_1_SYSPATHS=(
	"/sys/devices/pci0000:00/0000:00:14.0/usb1/1-6"
)
MODULE_SLOT_2_SYSPATHS=(
	"/sys/devices/pci0000:00/0000:00:14.0/usb1/1-7"
)

#
# Common functions
#
gpio_request() {
	local gpio=${1}

	if [ ! -e "/sys/class/gpio/gpio${gpio}" ]
	then
		echo "${gpio}" > /sys/class/gpio/export
	fi
}

gpio_set_value() {
	local gpio=${1}
	local value=${2}

	gpio_request "${gpio}"
	case "${value}" in
	0)
		echo "low" > "/sys/class/gpio/gpio${gpio}/direction"
		;;
	1)
		echo "high" > "/sys/class/gpio/gpio${gpio}/direction"
		;;
	esac
}

gpio_get_value() {
	local gpio=${1}

	gpio_request "${gpio}"
	cat "/sys/class/gpio/gpio${gpio}/value"
}

gp() {
	for gpiochip in /sys/class/gpio/gpiochip*
	do
		if cat "${gpiochip}"/label | grep -q "gpio_it87"
		then
			base=$(cat "${gpiochip}"/base)
			break
		fi
	done

	tens=$(($1 / 10))
	units=$(($1 % 10))
	echo $((base + 8 * (tens-1) + units))
}

not_support() {
	echo "Operation not supported"
}

MODULE_SLOT_FUNC_SEL_WIFI=0
MODULE_SLOT_FUNC_SEL_LTE=1

# GPIO defination for slot 1
MODULE_SLOT_1_FUNC_SEL="$(gp 27)"       # GP27 (gpio_group=2, offset=7)
MODULE_SLOT_1_PWR="$(gp 81)"            # GP81
MODULE_SLOT_1_SIM="$(gp 80)"            # GP80

# GPIO defination for slot 2
MODULE_SLOT_2_FUNC_SEL="$(gp 67)"       # GP67
MODULE_SLOT_2_PWR="$(gp 83)"            # GP83
MODULE_SLOT_2_SIM="$(gp 82)"            # GP82

#
# mx-module-ctl interfaces
#
# $1 module slot
module_power_on() {
	fs="MODULE_SLOT_${1}_FUNC_SEL"
	pwr="MODULE_SLOT_${1}_PWR"

	if [ -z "${!fs}" ] || [ -z "${!pwr}" ]
	then
		echo "Unknown Module Slot '${1}'"
		return 1
	elif [ "$(gpio_get_value "${!fs}")" -eq "${MODULE_SLOT_FUNC_SEL_WIFI}" ]
	then
		not_support
		return
	fi

	gpio_set_value "${!pwr}" 1
}

# $1 module slot
module_power_off() {
	fs="MODULE_SLOT_${1}_FUNC_SEL"
	pwr="MODULE_SLOT_${1}_PWR"

	if [ -z "${!fs}" ] || [ -z "${!pwr}" ]
	then
		echo "Unknown Module Slot '${1}'"
		return 1
	elif [ "$(gpio_get_value "${!fs}")" -eq "${MODULE_SLOT_FUNC_SEL_WIFI}" ]
	then
		not_support
		return
	fi

	gpio_set_value "${!pwr}" 0
}

module_reset_on() {
	not_support
}

module_reset_off() {
	not_support
}

# $1 module slot
# $2 sim slot
module_switch_sim() {
	ss="MODULE_SLOT_${1}_SIM"
	sim="${2}"

	if [ -z "${!ss}" ]
	then
		echo "Unknown Module Slot '${1}'"
		return 1
	fi

	case "${sim}" in
	1)
		gpio_set_value "${!ss}" 1
		;;
	2)
		gpio_set_value "${!ss}" 0
		;;
	*)
		echo "Unknown SIM ID '${ss}'"
		return 1
		;;
	esac
}

# $1 module slot
module_power_status() {
	fs="MODULE_SLOT_${1}_FUNC_SEL"
	pwr="MODULE_SLOT_${1}_PWR"

	if [ -z "${!fs}" ] || [ -z "${!pwr}" ]
	then
		echo "Unknown Module Slot '${1}'"
		return 1
	elif [ "$(gpio_get_value "${!fs}")" -eq "${MODULE_SLOT_FUNC_SEL_WIFI}" ]
	then
		not_support
		return
	fi

	gpio_get_value "${!pwr}"
}

# $1 module slot
module_sim_slot() {
	ss="MODULE_SLOT_${1}_SIM"
	sim="$(gpio_get_value "${!ss}")"

	if [ -z "${!ss}" ]
	then
		echo "Unknown Module Slot '${1}'"
		return 1
	fi

	case "${sim}" in
	0)
		echo "SIM Slot: 2"
		;;
	1)
		echo "SIM Slot: 1"
		;;
	*)
		echo "Unknown SIM ID '${sim}'"
		return 1
		;;
	esac
}

#
# moxa-module-control.service interfaces
#
module_service_start() {
	module_switch_sim 1 1
	module_switch_sim 2 1

	module_power_on 1
	module_power_on 2
}
